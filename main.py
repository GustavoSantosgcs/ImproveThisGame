from ClassesChar.mago      import Mago
from ClassesChar.arqueiro  import Arqueiro
from ClassesChar.ninja     import Ninja
from ClassesChar.guerreiro import Guerreiro
from vilao                 import Vilao
from batalha               import Batalha
from utils                 import Utils as ut
from heroi                 import Heroi
from itens                 import PocaoVida, PocaoMana
from repositorio           import (
    salvarHerois,
    carregarHerois,
    salvarViloes,
    carregarViloes
)


class Jogo:
    """
    Gerencia cadastro, sele√ß√£o, exclus√£o e batalha de her√≥is e vil√µes,
    suportando modos PvE e Hist√≥ria.
    """
    def __init__(self):
        # carregar reposit√≥rios
        self.herois: list[Heroi] = carregarHerois()
        self.viloes: list[Vilao] = carregarViloes()
        self.heroi: Heroi | None = None
        self.vilao: Vilao | None = None
        # vil√µes padr√£o para PvE e Hist√≥ria
        self.viloes_modo_hist = [ #nome, idade, vida, maldade,ataque,defesa
            Vilao("Goblin", 30, 80, "M√©dia", 15, 5), 
            Vilao("Drag√£o", 300, 170, "Alta", 30, 12)
        ]


    def menuInicial(self):
        ut.limparTela()
        print("=== MENU PRINCIPAL ===")
        print("1) Criar Her√≥i")
        print("2) Selecionar Her√≥i")
        print("3) Excluir Her√≥i")
        print("4) Listar Her√≥is e Vil√µes")
        print("5) Criar Vil√£o")
        print("6) Iniciar Batalha")
        print("7) Ver Invent√°rio e Hist√≥rico")
        print("0) Sair")
        return ut.naoVazio("Escolha uma op√ß√£o: ")


    def criarHeroi(self):
        ut.limparTela()
        print("=== CRIAR HER√ìI ===")
        nome  = ut.naoVazio("Nome: ")
        idade = ut.lerInteiro("Idade: ")

        while True:
            ut.limparTela()
            print("Classes:")
            print("1 - Mago")
            print("2 - Arqueiro")
            print("3 - Ninja")
            print("4 - Guerreiro")
            escolha = ut.naoVazio("escolha: ")
            if   escolha == "1": heroi = Mago(nome, idade)
            elif escolha == "2": heroi = Arqueiro(nome, idade)
            elif escolha == "3": heroi = Ninja(nome, idade)
            elif escolha == "4": heroi = Guerreiro(nome, idade)
            else:
                print("Op√ß√£o inv√°lida.")
                ut.pausar()
                continue

            # mostra descri√ß√£o e confirma
            ut.limparTela()
            print(heroi.descricao())
            conf = ut.naoVazio("Manter esta classe? (S/N): ").strip().lower()
            if conf == "s":
                break

        self.herois.append(heroi)
        salvarHerois(self.herois)
        print(f"Her√≥i '{heroi.nome}' cadastrado.")
        ut.pausar()


    def selecionarHeroi(self):
        ut.limparTela()
        print("=== SELECIONAR HER√ìI ===")
        if not self.herois:
            print("\nNenhum her√≥i dispon√≠vel.")
            ut.pausar()
            return
        for i, h in enumerate(self.herois, 1):
            print(f"{i}) {h.nome}")
        escolha = ut.lerInteiro("N√∫mero do her√≥i: ")
        if 1 <= escolha <= len(self.herois):
            self.heroi = self.herois[escolha - 1]
            print(f"\nHer√≥i selecionado: {self.heroi.nome}")
        else:
            print("Sele√ß√£o inv√°lida.")
        ut.pausar()


    def excluirHeroi(self):
        ut.limparTela()
        print("=== EXCLUIR HER√ìI ===")
        if not self.herois:
            print("\nNenhum her√≥i cadastrado.")
            ut.pausar()
            return
        for i, h in enumerate(self.herois, 1):
            print(f"{i}) {h.nome}")
        escolha = ut.lerInteiro("N√∫mero do her√≥i para excluir: ")
        if 1 <= escolha <= len(self.herois):
            removido = self.herois.pop(escolha - 1)
            if self.heroi == removido:
                self.heroi = None
            salvarHerois(self.herois)
            print(f"\nHer√≥i '{removido.nome}' exclu√≠do com sucesso.")
        else:
            print("Sele√ß√£o inv√°lida.")
        ut.pausar()


    def listarTodos(self):
        """
        Exibe todos os her√≥is e vil√µes cadastrados, incluindo suas classes.
        """
        ut.limparTela()
        print("=== HER√ìIS ===")
        if not self.herois:
            print("\n(nenhum)")
        else:
            for h in self.herois:
                classe = h.__class__.__name__
                print(
                    f"- {h.nome} ({classe}): "
                    f"Vida {h.vida}/{h.MAX_VIDA}, Mana {h.mana}/{h.MAX_MANA}"
                )

        print("\n=== VIL√ïES ===")
        todos = self.viloes_modo_hist + self.viloes
        if not todos:
            print("\n(nenhum)")
        else:
            for v in todos:
                classe_v = v.__class__.__name__
                print(
                    f"- {v.nome} ({classe_v}): "
                    f"Maldade {v.maldade}, Vida {v.vida}"
                )
        ut.pausar()


    def criarVilao(self):
        """
        Cria um vil√£o personalizado, solicitando todos os atributos.
        """
        ut.limparTela()
        print("=== CRIAR VIL√ÉO ===")
        nome    = ut.naoVazio("Nome: ")
        idade   = ut.lerInteiro("Idade: ")
        vida    = ut.lerInteiro("Vida: ")

        while True:
            maldade = ut.naoVazio("Maldade (Baixa/M√©dia/Alta): ").title()
            if maldade in ("Baixa", "M√©dia", "Alta"):
                break
            print("üî¥ N√≠vel de maldade inv√°lido! Escolha entre Baixa, M√©dia ou Alta.")
            ut.pausar()

        ataque = ut.lerInteiro("Ataque: ")
        defesa = ut.lerInteiro("Defesa: ")

        vilao = Vilao(nome, idade, vida, maldade, ataque, defesa)
        self.viloes.append(vilao)
        salvarViloes(self.viloes)

        classe_v = vilao.__class__.__name__
        print(f"‚úÖ Vil√£o '{vilao.nome}' ({classe_v}) cadastrado com sucesso!")
        ut.pausar()


    def menuBatalha(self):
        ut.limparTela()
        print("=== MODO DE BATALHA ===")
        print("1) PvE")
        print("2) Hist√≥ria")
        print("0) Voltar")
        return ut.naoVazio("Escolha o modo: ")


    def modoPvE(self):
        ut.limparTela()
        print("=== PvE: Escolha Her√≥i e Vil√£o ===")

        if not self.heroi:
            print("\n‚ö†Ô∏è  Nenhum her√≥i selecionado.")
            ut.pausar()
            return

        todos = self.viloes_modo_hist + self.viloes
        for i, v in enumerate(todos, 1):
            print(f"{i}) {v.nome} (Maldade {v.maldade})")
        escolha = ut.lerInteiro("N√∫mero do vil√£o: ")
        if 1 <= escolha <= len(todos):
            self.vilao = todos[escolha - 1]
        else:
            print("Sele√ß√£o inv√°lida.")
            ut.pausar()
            return

        venceu = Batalha(self.heroi, self.vilao).iniciarBatalha()
        salvarHerois(self.herois)
        ut.pausar()


    def modoHistoria(self):
        ut.limparTela()
        print("=== Hist√≥ria ===")

        if not self.heroi:
            print("\n‚ö†Ô∏è  Selecione um her√≥i antes de iniciar a Hist√≥ria.")
            ut.pausar()
            return

        # Fase 1: Goblin
        print("\n-- Fase 1: Goblin --")
        goblin = self.viloes_modo_hist[0]
        self.heroi.dialogar("Cheguei √† masmorra e vejo um Goblin!")
        ut.pausar()
        goblin.dialogar("Voc√™ n√£o passar√°!")
        ut.pausar()
        ut.limparTela()
        venceu1 = Batalha(self.heroi, goblin).iniciarBatalha()
        salvarHerois(self.herois)
        ut.pausar()
        if not venceu1:
            print("‚ò† Seu Her√≥i foi derrotado!\nGame Over. ")
            ut.pausar()
            return
        
        # Recompensa por vencer o Goblin
        print("\n-- Fase 1: Goblin --")
        print("üèÜ Voc√™ derrotou o Goblin e ganhou 2 po√ß√µes!")
        self.heroi.adicionarItem(PocaoVida())  # +1 Po√ß√£o de Vida
        self.heroi.adicionarItem(PocaoMana())  # +1 Po√ß√£o de Mana
        ut.pausar()
        ut.limparTela()
        

        # Fase 2: Drag√£o
        print("\n-- Fase 2: Drag√£o --")
        dragao = self.viloes_modo_hist[1]
        self.heroi.dialogar("O Goblin foi derrotado. Agora vem o Drag√£o!")
        ut.pausar()
        dragao.dialogar("ROOOOAR! Eu sou seu fim!")
        ut.pausar()
        venceu2 = Batalha(self.heroi, dragao).iniciarBatalha()
        salvarHerois(self.herois)
        ut.pausar()
        if venceu2:
            ut.limparTela()
            print("\n-- Fase 2: Drag√£o --")
            print("üéâ Parab√©ns! Voc√™ derrotou o Drag√£o e concluiu a hist√≥ria!")
            self.heroi.salvarRefem("Princesa")
        else:
            print("‚ò† Seu Her√≥i foi derrotado!\nGame Over.")
            ut.pausar()


    def verInventario(self):
        """
        Exibe o invent√°rio e o hist√≥rico de batalhas do her√≥i selecionado.
        """
        ut.limparTela()
        if not self.heroi:
            print("\n‚ö†Ô∏è  Nenhum her√≥i selecionado.")
        else:
            print(f"=== Invent√°rio de {self.heroi.nome} ===")
            if not self.heroi.inventario:
                print("(vazio)")
            else:
                for nome, qtd in self.heroi.inventario.items():
                    print(f"- {nome}: {qtd}")

            print("\n=== Hist√≥rico de Batalhas ===")
            if not self.heroi.historico:
                print("(nenhum hist√≥rico)")
            else:
                for evento in self.heroi.historico:
                    print(f"- {evento}")
        ut.pausar()


    def executar(self):
        while True:
            opc = self.menuInicial()
            match opc:
                case "1":
                    self.criarHeroi()
                case "2":
                    self.selecionarHeroi()
                case "3":
                    self.excluirHeroi()
                case "4":
                    self.listarTodos()
                case "5":
                    self.criarVilao()
                case "6":
                    modo = self.menuBatalha()
                    match modo:
                        case "1":
                            self.modoPvE()
                        case "2":
                            self.modoHistoria()
                        case _:
                            pass
                case "7":
                    self.verInventario()                
                case "0":
                    print("Encerrando...")
                    break
                case _:
                    print("Op√ß√£o inv√°lida.")
                    ut.pausar()


if __name__ == "__main__":
    Jogo().executar()
